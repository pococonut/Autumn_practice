from aiogram import types, F
from create import dp
from keyboards import menu_ikb, user_info_ikb, solved_tasks_nav, source_code_ikb
from commands.get_tasks import get_team_info_from_table
from commands.general_func import print_task, navigation, get_page, read_user_values, write_user_values
from commands.url_requests import read_teams, read_problems, read_submissions, read_submission_source_code, \
    read_scoreboard

globalDict_solved = read_user_values("globalDict_solved")
globalDict_move_solved = read_user_values("globalDict_move_solved")


def get_solved_tasks_ids_with_first(team_info):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
    —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º "–†–µ—à–∏–ª –ø–µ—Ä–≤—ã–º - –î–∞/–ù–µ—Ç"
    Args:
        team_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ

    Returns: –°–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ä–µ—à–µ–Ω–Ω—ã—Ö
     –∑–∞–¥–∞—á —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º "–†–µ—à–∏–ª –ø–µ—Ä–≤—ã–º - –î–∞/–ù–µ—Ç"
    """

    return dict((p.get("problem_id"), p.get("first_to_solve")) for p in team_info.get("problems") if p.get("solved"))


def get_solved_tasks(usr_id):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–¥–∞—á
    Args:
        usr_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns: –ú–∞—Å—Å–∏–≤, –∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –º–µ–Ω—é, –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.
             –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.
    """

    if usr_id not in globalDict_move_solved:
        globalDict_move_solved[usr_id] = 0
        write_user_values("globalDict_move_solved", globalDict_move_solved)

    solved_problems = []
    problems = read_problems()
    scoreboard = read_scoreboard()

    if not problems or not scoreboard:
        return ['–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞.', menu_ikb, solved_problems]

    team_info = get_team_info_from_table(usr_id, scoreboard)
    solved_tasks_ids = get_solved_tasks_ids_with_first(team_info)

    for problem in problems:
        if problem.get("id") in solved_tasks_ids:
            problem["first_to_solve"] = solved_tasks_ids.get(problem.get("id"))
            solved_problems.append(problem)

    if not solved_problems:
        return ['–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.', menu_ikb, solved_problems]

    return [solved_problems]


def get_usr_rating_info(team_info, scoreboard):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ –∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
    Args:
        team_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ
        scoreboard: –†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞

    Returns: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ –∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
    """

    for team in scoreboard.get("rows"):
        if team.get("team_id") == team_info.get("id"):
            return team


def get_team_info(usr_id):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ
    Args:
        usr_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º

    Returns: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ
    """

    for team in read_teams():
        if "_" in team.get("name") and usr_id == team.get("name").split("_")[1]:
            return team


def first_or_not(curr_problem):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —Ä–µ—à–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –ø–µ—Ä–≤—ã–º –∏–∑ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    Args:
        curr_problem: –¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞

    Returns: –°—Ç—Ä–æ–∫–∞ —Å –æ—Ç–≤–µ—Ç–æ–º
    """

    return f"\n\n<b>–†–µ—à–∏–ª –ø–µ—Ä–≤—ã–º</b>: {'–î–∞' if curr_problem.get('first_to_solve') else '–ù–µ—Ç'}\n\n"


def get_current_submission(usr_id):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —Ä–µ—à–µ–Ω–∏–∏
    Args:
        usr_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º

    Returns: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Ä–µ—à–µ–Ω–∏–∏
    """

    for s in read_submissions():
        if s["problem_id"] == globalDict_solved[usr_id]:
            return s


@dp.callback_query(F.data == 'info')
async def user_info(callback: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """

    scoreboard = read_scoreboard()
    if not scoreboard:
        await callback.message.edit_text(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞.', reply_markup=menu_ikb)
    else:
        usr_id = str(callback.from_user.id)

        team_info = get_team_info(usr_id)
        rating_usr_info = get_usr_rating_info(team_info, scoreboard)
        solved_problems = [p for p in rating_usr_info.get("problems") if p.get("solved")]
        best_ranks = {"1": "ü•á", "2": "ü•à", "3": "ü•â"}

        user_name = team_info.get('display_name')
        rank = str(rating_usr_info.get('rank'))
        rank_emoji = best_ranks.get(rank) if int(rank) <= 3 else ''
        score = rating_usr_info.get('score').get('num_solved')

        message_info = (f"<b><em>{user_name}</em></b>\n\n"
                        f"<em>–†–µ–π—Ç–∏–Ω–≥</em>: {rank} –º–µ—Å—Ç–æ {rank_emoji}\n"
                        f"<em>–°—á—ë—Ç</em>: {score}\n"
                        f"<em>–†–µ—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏</em>: {len(solved_problems)}\n\n")

        await callback.message.edit_text(message_info, reply_markup=user_info_ikb)


@dp.callback_query(F.data == 'solved_tasks')
async def show_solved_tasks(callback: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.
    """

    usr_id = str(callback.from_user.id)
    tasks_request_result = get_solved_tasks(usr_id)
    solved_tasks = tasks_request_result[-1]

    if not solved_tasks:
        message = tasks_request_result[0]
        keyboard = tasks_request_result[1]
        await callback.message.edit_text(message, reply_markup=keyboard)
    else:

        if usr_id not in globalDict_solved:
            globalDict_solved[usr_id] = solved_tasks[0].get('id')
            write_user_values("globalDict_solved", globalDict_solved)
        else:
            globalDict_solved[usr_id] = solved_tasks[globalDict_move_solved[usr_id]].get('id')
            write_user_values("globalDict_solved", globalDict_solved)

        page = get_page(usr_id, globalDict_move_solved, solved_tasks)
        page_of_all = f"<b>‚Ññ</b> {page + 1}/{len(solved_tasks)}\n\n"
        curr_problem = solved_tasks[globalDict_move_solved[usr_id]]
        first_solution = first_or_not(curr_problem)
        message = page_of_all + print_task(curr_problem) + first_solution

        await callback.message.edit_text(message, reply_markup=solved_tasks_nav,
                                         disable_web_page_preview=True)


@dp.callback_query(F.data.in_({'left_s', 'right_s'}))
async def show_solved_tasks_lr(callback: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
    """

    usr_id = str(callback.from_user.id)
    tasks_request_result = get_solved_tasks(usr_id)
    solved_tasks = tasks_request_result[-1]

    if not solved_tasks:
        message = tasks_request_result[0]
        keyboard = tasks_request_result[1]
        await callback.message.edit_text(message, reply_markup=keyboard)
    else:
        page = globalDict_move_solved[usr_id]
        number_tasks = len(solved_tasks)

        page_of_all, globalDict_move_solved[usr_id] = navigation(callback.data, page, number_tasks)
        write_user_values("globalDict_move_solved", globalDict_move_solved)

        curr_problem = solved_tasks[globalDict_move_solved[usr_id]]
        first_solution = first_or_not(curr_problem)
        globalDict_solved[usr_id] = curr_problem.get('id')
        write_user_values("globalDict_solved", globalDict_solved)
        message = page_of_all + print_task(curr_problem) + first_solution

        await callback.message.edit_text(message, reply_markup=solved_tasks_nav,
                                         disable_web_page_preview=True)


@dp.callback_query(F.data == "code_source")
async def show_task_code(callback: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ —Ä–µ—à–µ–Ω–∏—è
    """

    usr_id = str(callback.from_user.id)
    submission = get_current_submission(usr_id)
    code_source = f"<code>{read_submission_source_code(submission.get('id'))}</code>"
    await callback.message.edit_text(code_source, reply_markup=source_code_ikb)
